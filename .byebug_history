continue
window.size.to_a
window.size
window
@camera.w
@camera.size.to_a
@camera.size.to_f
@camera.size
@camera.methods
@camera.center
@camera
continue
@camera.y
@camera.center
@camera.size
@camera.matrix
@camera.viewport
@camera.y
@camera.x
@camera.methods
@camera.vieweport
@camera
continue
scene.pop_scene
scene.exit
scene.methods
scene
continue
self
player
continue
pos_x
continue
pos_y
pos_x
continue
id
continue
@enemies.count
@enemies
continue
self.objects.count
self.objects
exit
continue
@objects
continue
@objects
object
self.object
continue
exit
object
continue
object
continue
object
objec
continue
object
continue
object
continue
object
continue
object
continue
object.type
object
continue
group.objects.map {|m| [m.width, m.type] }
group.objects.map {|m| [m.height, m.type] }
group.objects.map {|m| [m.width, m.type] }
group.objects.map {|m| m.width }
group.objects.count.map {|m| m.width }
group.objects.count
group.objects
group
exit
continue
exit
continue
@object_groups[0].objects.select{|v|  v.width > 1 }.map {|v| v.type }
@object_groups[0].objects.select{|v|  v.width > 1 }.first
@object_groups[0].objects.select{|v|  v.width > 1 }.count
exit
@object_groups[0].objects.select{|v| v.type == 'Enemy'  && v.width > 1 }.count
@object_groups[0].objects.select{|v| v.type == 'Enemy'  && v.width > 1.0 }.count
@object_groups[0].objects.select{|v| v.type == 'Enemy' }.count
@object_groups[0].objects.select{|v| v.type == 'Enemy' }
@object_groups[0].objects
@object_groups[0]
@object_groups[0].first
@object_groups[0].select{|v| v.type == 'Enemy' }
exit
continue
@object_groups[0].select{|v| v.type == 'Enemy' }
@object_groups[0].select{|v| v.type = 'Enemy' }
@object_groups[0].select{|v| v.enemy }
@object_groups[0].objects.first
@object_groups[0].objects.count
@object_groups[0].objects
@object_groups[0]
@object_groups.count
@object_groups
continue
x
@map.object_map.objects.first.h
@map.object_map.objects.first.w
@map.object_map.objects.first.y
@map.object_map.objects.first.x
@map.object_map.objects.first.methods
@map.object_map.objects.first
continue
@sprite.sprite_width / 2
@sprite.sprite_width
@sprite.pos
@sprite.methods
@sprite
continue
self.size
self.position
self
win
window
@texture.pos.to_a
@texture.pos
continue
@layers[1].count
@layers[1]
@layers[0].second
@layers[0].first
@layers[0]
@layers[0][0]
@layers[0][0][0]
@layers[0].count
@layers[0].cout
@layers[0]
@layers
texture
exit
continue
l[[1, 1]].width
l[[1, 1]].sheet_size
l[[1, 1]]
l[[1, 1]].pos.to_a
l[[1, 1]]
l[[x, y]].pos.to_a
l[[x, y]].pos
l[[x, y]].methods
l[[x, y]].size
l[[x, y]].sie
l[[x, y]]
y
x
continue
@texture.each_with_pos {|v| puts v }
@texture.each_with_post {|v| puts v }
@texture
@texture.update
@texture
image_target(@texture) {|v| v.draw @layers.first[[0,0]]  }
image_target @texture {|v| v.draw @layers.first[[0,0]]  }
image_target @texture
@layers.first[[0,0]]
@layers.first[0,0]
@layers.first
@layers
image_target.draw
image_target.methods
image_target
@texture.height
@texture.width
@texture.methods
@texture
@texture.each_with_pos {|v| puts v }
@texture.texture
@texture.write_png
@texture.methods.write_png
@texture.methods
@texture
@text
continue
@layers.first
@layers.count
@layers.coun
@layers
continue
@sprite.pos.inside?
@sprite.pos
@sprite.methods
@sprite
e
exit
continue
node.y < @sprite.y
node.y
@sprite.y
node.y > @sprite.y
node.y
@sprite.y
@sprite
node.y
node.x
node
exit
player.vertex_count
player.rect
player.rect.methods
player.rect
player.vertex_count
player.vertext_count
player
player.matrix.content
player.matrix.methods
player.matrix
player.matric
player.methods
player
player.rect.pos Ray::Vector2[2,5]
player.rect.pos
player.pos(
player.rect.methods
player.rect
player.rect.pos = Ray::Vector2[2,5]
player.rect.pos = Ray::Vector[2,5]
player.rect.pos = Ray::Vector@[2,5]
player.rect.pos
player.rect
Ray::Vector2[2,5]
continue
player.rect
player.rect.hash
player.rect.methods
player.rect
player
continue
player.rect.x
player.rect.collide?
player.rect.collides?
player.rect
player.collide?
player.collides?
player.image.collides?
player.image
player
continue
player.collide?(obj)
continue
player.collide?(obj)
continue
player.collide?(obj)
continue
player.collide?(obj)
continue
player.collide?(obj)
